#!/usr/bin/env python
"""Lorem ipsum."""

import json
import logging
from pathlib import Path
import subprocess

from fabric.connection import Connection
from git import Commit, Repo

LOGGER = logging.getLogger("deploy_to_board")


def get_modified_components(repo_root: Path, modified_files: set[Path]) -> set[str]:
    """Lorem ipsum."""
    components_root = repo_root / "homeassistant" / "components"
    return {
        f.relative_to(components_root).parts[0]
        for f in modified_files
        if f.is_relative_to(components_root)
    }


def _patch_package_version(host: str, component: str) -> None:
    """Resolve the disagreement in package requirements between home assistant 'official' components and 'custom' components.

    This function is required because 'official' components are not allowed to specify a version in their manifest, while 'custom' components MUST do so. The version number doesn't actually matter, so we just write it as an arbitrary, hardcoded value.
    """
    with Connection(host) as c, c.sftp() as sftp:
        manifest_file = f"config/custom_components/{component}/manifest.json"
        with sftp.open(manifest_file) as f:
            manifest_data = json.load(f)
        with sftp.open(manifest_file, "w") as f:
            manifest_data["version"] = "0.0.1"
            json.dump(manifest_data, f, indent=2)


def push_to_board(repo_root: Path, host: str, modified_components: set[str]) -> None:
    """Lorem ipsum."""
    LOGGER.info(f"Pushing to board: {modified_components}")  # noqa: G004
    for component in modified_components:
        results = subprocess.Popen(  # noqa: S602
            f"rsync -av {repo_root / "homeassistant" / "components" / component} {host}:config/custom_components",
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        stdout, stderr = results.communicate()
        assert (
            results.returncode == 0
        ), f"[{component} rsync failed with: {stderr.decode()}"
        LOGGER.debug(stdout.decode())
        _patch_package_version(host, component)


def _get_common_ancestor_commit(repo: Repo, base_branch: str) -> Commit:
    common_ancestor_commit = repo.merge_base(repo.refs[base_branch], repo.head)
    assert len(common_ancestor_commit) == 1
    return common_ancestor_commit[0]


def main(
    repo_root: Path = Path(__file__).parents[1],
    base_branch: str = "origin/dev",
    remote_host: str = "home-assistant",
) -> None:
    """Lorem ipsum."""
    repo = Repo(repo_root)
    common_ancestor_commit = _get_common_ancestor_commit(repo, base_branch)
    diffs = common_ancestor_commit.diff(None)

    modified_files = set()
    for diff in diffs:
        modified_files.add(Path(repo_root) / diff.b_path)

    for u in repo.untracked_files:
        modified_files.add(Path(repo_root) / u)

    modified_components = get_modified_components(repo_root, modified_files)
    push_to_board(repo_root, remote_host, modified_components)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
